The char type is used for storing characters such as letters and punctuation marks, but technically it is an integer
type. The char type actually stores integers, not characters. To handle characters, the computer uses a numerical
code in which certain integers represent certain characters.

The printf() function uses the %f format specifier to print type float and double numbers using decimal notation,
and it uses %e to print them in exponential notation. Note that both float and double use the %f, %e or %a specifier
for output. That's because C auto-matically expands type float values to type double when they are passed as 
arguments to any function.

Note that the size of char is necessarily 1 byte because C defines the size of 1 byte in terms of char. So, on a
system a 16-bit char and a 64-bit double, sizeof will report double as having a size of 4 bytes.

C now has a function-prototyping mechanism that checks whether a function call has the correct number and correct
kind of arguments, but it doesn't work with printf() and scanf() because they take a variable number of arguments.

Initially, printf() statements send output to an intermediate storage area called a buffer. Every now and then, the 
material in the buffer is sent to the screen. The standard C rules for when output is sent from the buffer to the screen
are clear. It is sent when the buffer gets full, when a newline character is encountered, or when there is impending 
input.(Sending the output from the buffer to the screen or file is called flushing the buffer.)