When using while, keep in mind that only the single statement, simple or compound, following the test condition is 
part of the loop.

All nonzero values are regarded as true, and only 0 is recognized as false. Alternatively, you can say that a while 
loop executes as long as its test condition evaluates to nonzero. Keep in mind that relational expressions evaluate 
to 1 if true and to 0 if false, so such expressions really are numeric.

Furthermore, the value of an assignment statement is the value of the left side, so status = 1 has the same numerical
value of 1.

The for loop gathers all three actions(initializing, testing, and updating) into one place.The first expression is the 
initialization. It is done just once, when the for loop first starts. The second expression is the test condition; 
it is evaluated before each potential execution of a loop. When the expression is false, the loop is terminated. 
The third expression, the change or update, is evaluated at the end of each loop.

Each of the three control expressions is a full expression, so any side effects in a control expression, such as 
incrementing a value, take place before the program evaluates another expression.

The comma is a sequence point, so all side effects to the left of the comma take place before the program moves to 
the right of the comma.

The comma being a sequence point guarantees that the side effects of the left subexpression occur before the right 
subexpression is evaluated. the value of the whole comma expression is the value of the right-hand member.

The while loop and the for loop are both entry-condition loops. The test condition is checked before each iteration 
of the loop, so it possible for the statements in the loop to never execute. C also has an exit-condition loop, 
in which the condition is checked after each iteration of the loop, guaranteeing that statements are executed at 
least once. This variety is called a do while loop.

The prototype allows the compiler to see whether you've used the function correctly, and the definition sets down 
how the function works. The prototype and definition are examples of the contemporary programming practice of 
separating a program element into an interface and an implementation. The interface describes how a feature is used,
which is what a prototype does, and the implementation sets forth the particular actions taken, which is what the 
definition does.