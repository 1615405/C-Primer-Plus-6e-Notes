Consider an assignment statement. Its purpose is to store a value at a memory location,. Data object is a general term 
for a region of data storage that can be used to hold values. The C standard uses just the term object for this concept.
One way to identify an object is by using the name of a variable. But, as you will eventually learn, there are other was
to identify an object. For example, you could specify an element of an array, a member of a structure, or use a pointer
expression that involves the address of the object. C use the term lvalue to mean any such name or expression that 
identifies a particular data object. Object refers to the actual data stroage, but an lvalue is a label used to 
identify, or locate, the storage.

And C added the term modifiable lvalue to identify an object whose value can be changed. Therefore, the left side of an
assignment operator should be a modefiable lvalue.

Rvalues can be constants, variables, or any other expression that yields a value, such as a function call.

income = salary + bribes; As a reminder, note the income, salary, and bribes all are modifiable lvalues because each
identifies a data object that could be assigned a value, but the expression salary + bribes is an rvalue, a 
calculated value not identified with a particular memory location.

The sizeof operator returns the size, in bytes, of its operand. A C byte is defined as the size used by the char
type. The operand can be a specific data object, such as the name of a variable, or it can be a type. If it is a
type, such as float, the operand must be enclosed in parentheses.

C says that sizeof returns a value of type size_t;

C99 goes a step further and supplies %zd as a printf() specifier for displaying a size_t value.

Don't bother trying to use modules operator with floating-point numbers. It just won't work.

In any case, the standard says, in effect, that if a and b are integer values, you can calculate a%b by subtracting
(a/b)*b from a.
-11 % 5: -11 - (-11 / 5) * 5 = -11 + 2 * 5 = -1;

Another advantage of the increment operator is that it usually produces slightly more efficient machine language code
because it is similar to actual machine language instrcutions. However, as vendors produce better C compilers, this 
advantage may disappear. A smart compiler can recognize that x = x + 1 can be treated the same as ++x.