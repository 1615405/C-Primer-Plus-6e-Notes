Scope describes the region or regions of a program that can access an identifier. A C variable has one of the following
scope: block scope, function scope, function prototype scope, or file scope.

A variable with its definition placed outside of any function has file scope. A variable with file scope is visible from
the point it is defined to the end of the file containing the definition. Because they can be used in more than one 
function, file scope variables are also called global variables.

Thus the compiler sees a single file containing information from your source code file and all the header files. This 
single file is called a translation unit.

A C variable has one of the following linkages: external linkage, internal linkage, or no linkage. Variables with block
scope, function scope, or function prototype scpe have no linkage. That means they are private to the bolck, function, 
or prototype in which they are defined. A variable with file scope can have either internal or external linkage. A 
variable with external linkage can be used anywhere in a multifile program. A variable with internal linkage can be used
anywhere in a single translation unit.

Scope and linkage describe the visibility of identifiers. Storage duration describes the persistence of the objects 
accessed by these identifiers. A C object has one of the following four storage durations: static duration, thread 
duration, automatic storage duration, or allocated storage duration.

If an object has static storage duration, it exists throughout program execution. Variables with file scope have static
storage duration.

Variables with block scope normally have automatic storage duration. These variables have memory allocated for them when
the program enters the bolck in which they are defined, and the memory is freed when the bolck is exited.

Variable-length arrays provide a slight exception in that they exist from the point of declaration to the end of the 
block rather than from the beginning of the block to the end.

Five storage classes: automatic, register, static with block scope, static with external linkage, and static with 
internal linkage.

A variable belonging to the automatic storage class has automatic storage duration, block scope, and no linkage.

Static variables are initialized to zero if you don't explicitly initialize them to some other value.

Static variables and external variables are already in place after a program is loaded into memory. You can't use static
for function parameters.

A static variable with external linkage has file scope, external linkage, and static storage duration. This class is 
sometimes termed the external storage class, and variables of this type are called external variables.

In short, a variable in block scope "hides" a variable of the same name in file scope while the program executes 
statements in the block.

Don't use the keyword extern to create an external definition; use it only to refer to an existing external definition.
An external variable can be initialized only once, and that must occur when the variable is defined.

Complex C programs often use several separate files of source code. Sometimes these files might need to share an 
external variable. The C way to do this is to have a defining declaration in one file and referencing declaration in the
other files. That is, all but one declaration (the defining declaration) should use the extern keyword, and only the 
defining declaration should be used to initialize the variable.

The auto specifier indicates a variable with automatic storage duration. It can be used only in declarations of 
variables with block scope, which already have automatic storage duration, so its main use is documenting intent.

The register specifier also can be used only with variables of block scope. It puts a variable into the register storage
class, which amounts to a request to minimize the access time for that variable. It also prevents you from taking the 
address of the variable.

The static specifier creates an object with static duration, one that's created when the program is loaded and ends when
the program terminates. If static is used with a file scope declaration, scope is limited to that one file. If static is
used with a block scope declaration, scope is limited to that block. Thus, the object exists and retains its value as 
long as the program is running, but it can be accessed by the identifier only when code within the block is being 
executed. A static variable with block scope has no linkage. A static variable with file scope has internal linkage.

The extern specifier indicates that you are declaring a variable that has been defined elsewhere. If the declaration 
containing extern has file scope, the variable referred to must have external linkage. If the declaration containing 
extern has block scope, the referred-to variable can have either external linkage or internal linkage, depending on the 
defining declaration for that variable.

An external function can be accessed by functions in other files, but a static function can be used only within the 
defining file.

The amount of static memory is fixed at compile time: it does not change while the program is running. The amount of 
memory used for automatic variables grows and shrinks automatically as the program executes. But the amount of memory 
used for allocated memory just grows unless you remember to use free().

You can think of a program as dividing its available memory into three separate sections: one for static variables with
external linkage, internal linkage, and no linkage; one for automatic variables; and one for dynamically allocated memory.

The amount of memory needed for the static duration classes is known at compile time, and the data stored in this 
section is available as long as the program runs. Each variable of these classes comes into being when the program
starts and expires when the program ends.

An automatic variable, however, comes into existence when a program enters the block of code containing the variable's 
definition and expires when its block of code exited. Therefore, as a program calls functions and as functions terminate,
the amount of memory used by automatic variables grows and shrinks. This section of memory is typically handled as a stack.

Dynamically allocated memory comes into existence when malloc() or a related function is called, and it's freed when 
free() is called. Using dynamic memory tends to be a slower process than using stack memory.

In short, a const anywhere to the left of the * makes the data constant; and a const to the right of the * makes the 
pointer itself constant.

The restrict keyword enhances computational support by giving the compiler permission to optimize certain kinds of code.
It can be applied only to pointers, and it indicates that a pointers is the sole initial means of accessing a data object.