The double quotation marks are not part of the string. They inform the compiler that they enclose a string, just as
single quotation marks identify a character.

C has no special variable type for strings. Instead, strings are stored in an array of type char. Characters in a
are stored in adjacent memory cells, one character per cell, and an array consists of adjacent memory locations, so
placing a string in an array is quite natural.

The \0 is the null character, and C uses it to mark the end of a string. The null character is not the digit of zero.
it is the nonprinting character whose ASCII code value (or equivalent) is 0. Strings in C are always stored with this
terminating null character. The presence of the null character means that the array must have at least one more cell
than the number of characters to be stored.

The string constant "x" is not the same as the character constant 'x'. One difference is that 'x' is a basic type,
but "x" is a derived type, an array of char. A second difference is that "x" really consists of two characters, 'x'
and '\0', the null character.

The printf() function has a return value; it returns the number of characters it printed. note that the count
includes all the printed characters, including the spaces and the unseen newline character.

If you want to store that as a numerical value rather than as a string, your program has to convert the string 
character-by-character to a numerical value; that is what scanf() does! It converts string input into various forms:
integers, floating-point numbers, characters, and C strings. It is the inverse of printf(), which converts integers,
floating-point numbers, characters, C strings to text that is to be displayed onscreen.

The printf() function use variable name, constants, and expressions. The scanf() function uses pointers to variables.

The scanf() function uses whitespace(newlines, tabs, and spaces) to decide how to divide the input into the separate
fields. The only exception to this is the %c specification, which reads the very next character, even if the 
character is whitespace.

The main difference is that printf() use %f, %e, %E, %g, and %G for both type float and type double, whereas scanf() 
uses them just for type float, requiring the l modifier for double.

Suppose you use a %d specifier to read an integer. The scanf() function begins reading input a character at a time.
It skips over whitespace characters(spaces, tabs, and newlines) until it finds a non-whitespace character. Because 
it is attemping to read an integer, scanf() expects to find a digit character or, perhaps, a sign(+ or -). If it 
finds a digit or a sign, it saves that character and then reads the next character. If that is a digit, it saves the
digit and reads the next character. scanf() continues reading and saving characters until it encounters a nondigit.
It then concludes that it has reached the end of the integer. scanf() places the nondigit back into the input.

If you use a field width, scanf() halts at the field end or at the first whitespace, whichever comes first.

For instance, the %x specifier requires that scanf() recognize the hexadecimal digits a-f and A-F. Floating-point 
specifiers require that scanf() to recognize decimal points, e-notation, and the new p-notation.

If you use an %s specifier, any character other than whitespace is accpetable, so scanf() skips whitespace to the 
first non-whitespace character and then saves up non-whitespace characters until hitting whitespace again.

A final point: When scanf() places the string in the designated array, it adds the terminating '\0' to make the array
contains a C string.

If you use a %c specifier, all input characters are fair game. If the next input character is a space or a newline, 
a space or a newline is assigned to the indicated variable; whitespace is not skipped.

The command scanf("%c", &ch) reads the first character encountered in input, and scanf(" %c", ch) reads the first
non-whitespace character encountered.

The scanf() function returns the number of items that it successfully reads. If it reads no items, which happens if
you type a nonnumerical string when it expects a number, scanf() returns the value 0. It returns EOF when it detects
the condition known as "end of file".

Suppose that you don't want to commit yourself to a field width in advance but rather you want the program to specify
it. You can do this by using * instead of a number for the field width, but you slao have to add an argument to tell
what the field width should be.

The * severs quite a different purpose for scanf(). When placed between the % and the specifier letter, it causes
that function to skip over corresponding input.

Whitespace characters(tabs, spaces, and newlines) play a critical role in how scanf() views input. Except when in
the %c mode(which reads just the next character), scanf() skips over whitespaces to the first non-whitespace 
character when reading input. It then keeps reading characters either until encountering whitespace or until 
encountering a character that doesn't fit the type being read. 