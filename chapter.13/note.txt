Low-level I/O uses the fundamental I/O services provided by the operating system. Standard high-level I/O uses a 
standard package of C library functions and stdio.h header file definition.

C programs automatically open three files on your behalf. They are termed the standard input, the standard output, and 
the standard error output. The standard input, by default, is the normal input device for your system, usually your 
keyboard. Both the standard output and the standard error output, by default, are the normal output divice for your
system, usually your display screen.

The file pointer (FILE *fp) is of type pointer-to-FILE. FILE is a derived type defined in stdio.h. The pointer fp 
doesn't point to the actual file. Instead, it points to a data object containing information about the file, including
information about the buffer used for the file's I/O.

The fseek() function enables you to treat a file like an array and move directly to any particular byte in a file opened
by fopen(). Note that fseek() has three arguments and returns an int value. The ftell() function returns the current 
position in a file as a long value.

Calling the fflush() function causes any unwritten data in the output buffer to be sent to the output file identified by
fp. This process is called flushing a buffer. If fp is the null pointer, all output buffers are flushed. The effect of 
using fflush() on an input stream is undefined.

The setvbuf() function sets up an alternative buffer to be used by the standard I/O functions. It is called after the 
file has been opened and before any other functions have been performed on the stream.

The standard I/O package automatically creates input and output buffers to speed up data transfer. The fopen() function
opens a file for standard I/O and creates a data structure designed to hold information about the file and the buffer.
The fopen() function returns a pointer to that data structure, and this pointer is used by other functions to identify 
the file to be processed. The feof() and ferror() functions report the reason an I/O operation failed.

ANSI C provides two file-opening modes: binary and text. When a file is opened in binary mode, it can be read byte-for-byte.
When a file is opened in text mode, its contents may be mapped from the system representation of text to the C representation.
For Unix and Linux System, the two modes are identical.

The input functions getc(), fgets(), fscanf(), and fread() normally read a file sequentially, starting at the beginning
of the file. However, the fseek() and ftell() functions let a program move to an arbitrary position in a file, enabling
random access. Random access works better in the binary mode than in the text mode.